; Output a list of card names based on the card file names with
; the ".bmp" extension removed. All names must be converted to
; uppercase or else they won't work properly!

; Program written by Stan Munson (trollopite@hotmail.com).

TO MAKE.DECK
	(LOCAL "DEFAULT "CARDDECK)
	MAKE "DEFAULT CURDIR
	SETCURDIR "|~home/toolbox/cards|
	MAKE "CARDDECK (SE (DIR "|C*.BMP|) (DIR "|D*.BMP|) (DIR "|H*.BMP|) (DIR "|S*.BMP|))
	SETCURDIR :DEFAULT
	OUTPUT UPPERCASE.ALL REM.EXT :CARDDECK
END

; Output a list with every element converted to uppercase

TO UPPERCASE.ALL :LIST
	IF EMPTY? :LIST OUTPUT []
	OUTPUT FPUT UPPERCASE FIRST :LIST UPPERCASE.ALL BUTFIRST :LIST
END

; Output a list of file names withe the extension removed

TO REM.EXT :LIST
	IF EMPTY? :LIST OUTPUT []
	OUTPUT FPUT BL BL BL BL FIRST :LIST REM.EXT BF :LIST
END

; Output a new word or list with a specific item removed

TO REMOVE.ITEM :N :WORL
	IF WORD? :WORL THEN OUTPUT REMOVE.LETTER :N :WORL
	OUTPUT REMOVE.ELEMENT :N :WORL
END

TO REMOVE.ELEMENT :N :LIST
	IF .LT :N 2 THEN OUTPUT BUTFIRST :LIST
	OUTPUT SENTENCE (FIRST :LIST) (REMOVE.ELEMENT (:N - 1) (BUTFIRST :LIST))
END

TO REMOVE.LETTER :N :WORD
	IF .LT :N 2 THEN OUTPUT BUTFIRST :WORD
	OUTPUT WORD (FIRST :WORD) (REMOVE.LETTER (:N - 1) (BUTFIRST :WORD))
END

; Output a list with elements randomly arranged

TO SHUFFLE :LIST
	LOCAL "X
	IF EMPTY? :LIST THEN OUTPUT []
	MAKE "X RANDOM COUNT :LIST
	OUTPUT FPUT ITEM :X :LIST SHUFFLE REMOVE.ITEM :X :LIST 
END

; Translate card name to text message

TO CARD.RANK :CARD
	OUTPUT BUTFIRST :CARD
END

TO CARD.SUIT :CARD
	OUTPUT FIRST :CARD
END

TO SUIT.NAME :CARD
	OUTPUT FIRST BUTFIRST FROMMEMBER CARD.SUIT :CARD :SUIT.NAMES
END

TO RANK.NAME :CARD
	OUTPUT FIRST BUTFIRST FROMMEMBER CARD.RANK :CARD RANK.NAMES
END

; Create the card bitmap objects

TO CREATE.CARDS :DECK
	FOREACH :DECK [
	  DECLARE "BITMAP "?
	  ; PPROP "? "VISIBLE "FALSE
	  ASK "? [LOAD WORD "|~home/toolbox/cards/| "?]
	]
END

; Global definitions

MAKE "RANK.NAMES [A ACE 2 TWO 3 THREE 4 FOUR 5 FIVE 6 SIX 7 SEVEN 8 EIGHT 9 NINE 10 TEN J JACK Q QUEEN K KING]
MAKE "SUIT.NAMES [C CLUBS D DIAMONDS H HEARTS S SPADES]
MAKE "DECK MAKE.DECK
CREATE.CARDS :DECK

TO 52PICKUP
	FOREACH :DECK [
	  ASK "? [
		SETXY LIST ((RANDOM 300) * (PICK [1 -1])) ((RANDOM 200) * (PICK [1 -1]))
	  ]
	]
END


; Procedures for moving a turtle through a user-supplied path of coordinates.
;
; MOVE causes a turtle to move from point to point as supplied in a 
; list of coordinates which can result in a very complicated movement.
;
; To invoke, type MOVE and give it the turtle number or name, the list
; of coordinate points and either "TRUE (if you want the turtle to move
; forever) or "FALSE (if you want the turtle to stop at the last point).
;
; To test if a turtle is already moving, use MOVING? with the turtle
; number or name. It returns "TRUE if the turtle is moving and "FALSE
; if it is not.
;
; To stop the turtle movement, use STOP.MOVING with the turtle number
; or name.

TO MOVE :TURTLE :PATH :FOREVER?
	IF MOVING? :TURTLE THEN STOP.MOVING :TURTLE
	PPROP :TURTLE "MOVE.PATH :PATH
	PPROP :TURTLE "MOVE.FOREVER? :FOREVER?
	PPROP :TURTLE "MOVE.ID LAUNCH LIST "MOVEMENT QUOTE (:TURTLE)
END

TO MOVING? :TURTLE
	OUTPUT NOT EMPTY? GPROP :TURTLE "MOVE.ID
END

TO STOP.MOVING :TURTLE
	IF NOT MOVING? :TURTLE THEN STOP
	LOCAL "ID
	MAKE "ID GPROP :TURTLE "MOVE.ID
	REMPROP :TURTLE "MOVE.PATH
	REMPROP :TURTLE "MOVE.FOREVER?
	REMPROP :TURTLE "MOVE.ID
	HALT :ID
END

TO MOVEMENT :TURTLE
	(LOCAL "POINT "MAXPOINTS "NEXTPOINT "PATH "PENSTATE)
	MAKE "PATH GPROP :TURTLE "MOVE.PATH
	MAKE "MAXPOINTS COUNT :PATH
	MAKE "POINT :MAXPOINTS
	ASK :TURTLE [
	  MAKE "PENSTATE LIST PEN PENCOLOR
	  PENUP SETXY FIRST :PATH
	  SETPEN :PENSTATE]
	WHILE ["TRUE] [
	  MAKE "POINT 1 + REMAINDER :POINT :MAXPOINTS 
 	MAKE "NEXTPOINT ITEM :POINT :PATH 
 	 ASK :TURTLE [SETH TOWARDS :NEXTPOINT] 
	  WHILE [NOT EQUAL? ASK :TURTLE [GETXY] :NEXTPOINT] [
		ASK :TURTLE [FD 1]] 
	 IF END.OF.MOVING? THEN STOP.MOVING :TURTLE STOP 
		]
END

TO END.OF.MOVING?
	OUTPUT AND (EQUAL? :POINT :MAXPOINTS) (EQUAL? "FALSE GPROP :TURTLE "MOVE.FOREVER?)
END

;foreach :deck [wait 200 move "? [[-200 0] [0 100] [200 0] [0 -100]] "true]
;foreach :deck [ask "? [home]]
;foreach :deck [stop.moving "?]
foreach :deck [if equal? card.suit "? "c wait 200 move "? [[-200 0] [0 100] [200 0] [0 -100]] "true]
foreach :deck [if equal? card.suit "? "d wait 200 move "? [[-200 0] [0 100] [200 0] [0 -100]] "true]
foreach :deck [if equal? card.suit "? "h wait 200 move "? [[-200 0] [0 100] [200 0] [0 -100]] "true]
foreach :deck [if equal? card.suit "? "s wait 200 move "? [[-200 0] [0 100] [200 0] [0 -100]] "true]
